#!/usr/bin/python
import sys
sys.path.append('../')

import string

import cratylus

class CrcException(Exception):
    pass

def crc_condition(monomial, table):
    key, coef = monomial.coefficients().items()[0]
    cond = []
    for var, power in key:
        cond.append('v[%u] >= %u' % (table[var], power))
    return ' && '.join(cond)

def crc_inc_dec(monomial, table, sign, indent=''):
    key, coef = monomial.coefficients().items()[0]
    stmt = []
    for var, power in key:
        stmt.append('%sv[%u] %s= %u;\n' % (indent, table[var], sign, power))
    return ''.join(stmt)

def crc(filename, program):
    program = cratylus.parse_program(program, filename)

    # Collect all polynomials
    all_polys = []
    for rule in program.rules:
        if rule.is_goal():
            all_polys.extend(rule.clause)
        else:
            all_polys.append(rule.head)
            all_polys.extend(rule.clause)

    # Count variables
    var_count = {}
    for poly in all_polys:
        if not poly.is_monomial():
            raise CrcException('"%s" is not a monomial' % (poly,))
        key, coef = poly.coefficients().items()[0]
        if coef != 1:
            raise CrcException('"%s" is not in monomial form (coeff should be 1)' % (poly,))
        for var, power in key:
            var_count[var] = var_count.get(var, 0) + 1

    # Build translation table
    num_vars = len(var_count) # number of distinct variables
    old_vars = sorted(var_count.items(), key=lambda (v, c): -c)
    old_vars = [v for v, c in old_vars]
    new_vars = list(range(num_vars))
    table = dict(zip(old_vars, new_vars))

    reverse_table = {}
    for k, v in table.items():
        reverse_table[v] = k
    reverse_table = [k for v, k in sorted(reverse_table.items())]

    prog = []
    prog.append('/* Generated by the Cratylus to C broken compiler */\n\n')
    prog.append('/*\n')
    for old, new in sorted(table.items()):
        prog.append( '* %s --> %s\n' % (old, new))
    prog.append('*/\n')
    prog.append('\n')
    prog.append('#include <stdio.h>\n')
    prog.append('\n')
    prog.append('#define VARS %u\n' % (num_vars,))
    prog.append('unsigned long int v[VARS];\n')
    prog.append('\n')
    prog.append('char *n[] = {\n')
    for varname in reverse_table:
        prog.append('\t"%s",\n' % (varname,))
    prog.append('};\n')
    prog.append('\n')

    # Translate program
    prog.append('int main()\n')
    prog.append('{\n')
    prog.append('\tint i;\n')
    prog.append('\n')
    prog.append('\t/* Initialize */\n')
    prog.append('\tfor (i = 0; i < VARS; i++) {\n')
    prog.append('\t\tv[i] = 0;\n')
    prog.append('\t}\n')
    prog.append('\n')

    ngoals = 0
    for rule in program.rules:
        if not rule.is_goal(): continue
        ngoals += 1
        if ngoals > 1:
            raise CrcException('Cratylus to C broken compiler supports at most one goal')
        prog.append('\t/* Goal: %s */\n' % (rule,))
        for m in rule.clause:
            prog.append(crc_inc_dec(m, table, '+', indent='\t'))
        prog.append('\n')

    prog.append('\twhile (1) {\n')
    prog.append('\t\tif (0) {\n')
    for rule in program.rules:
        if rule.is_goal(): continue
        prog.append('\t\t} else if (%s) {\n' % (crc_condition(rule.head, table),))
        prog.append('\t\t\t/* %s */\n' % (rule,))
        prog.append(crc_inc_dec(rule.head, table, '-', indent='\t\t\t'))
        for m in rule.clause:
            prog.append(crc_inc_dec(m, table, '+', indent='\t\t\t'))
    prog.append('\t\t} else {\n')
    prog.append('\t\t\tbreak;\n')
    prog.append('\t\t}\n')
    prog.append('\t}\n')
    prog.append('\n')
    prog.append('\tfor (i = 0; i < VARS; i++) {\n')
    prog.append('\t\tif (v[i] > 0) {\n')
    prog.append('\t\t\tprintf("%s", n[i]);\n')
    prog.append('\t\t\tif (v[i] > 1) {\n')
    prog.append('\t\t\t\tprintf("^%lu", v[i]);\n')
    prog.append('\t\t\t}\n')
    prog.append('\t\t}\n')
    prog.append('\t}\n')
    prog.append('\tprintf("\\n");\n')
    prog.append('\n')
    prog.append('\treturn 0;\n')
    prog.append('}\n')
    return ''.join(prog)

def usage():
    sys.stderr.write('Cratylus to C broken compiler.\n')
    sys.stderr.write('Copyright (c) 2012 - Pablo Barenbaum <foones@gmail.com>\n')
    sys.stderr.write('Usage:\n')
    sys.stderr.write('    %s <infile.cr>\n' % (sys.argv[0],))
    sys.exit(1)

if __name__ == '__main__':

    outfile = None

    if len(sys.argv) != 2:
        usage()

    infile = sys.argv[1]

    f = file(infile)
    contents = f.read()
    f.close()

    result = crc(infile, contents)

    print result

    if infile.endswith('.cr'):
        outfile = infile[:-1]
    else:
        outfile = infile + '.c'
    f = file(outfile, 'w')
    f.write(result)
    f.close()

